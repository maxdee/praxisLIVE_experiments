@ ./basicPointMaker core:custom {
  #%graph.x 0
  #%graph.y 0
  .code "import java.io.*;


    @AuxOut(0)
    Output xyzxyz;

    ArrayList<PVector> points;
    float\[\] data;

    @P(1) @Type.Number() double var = 0;

    @Override
    public void setup() \{
        points = new ArrayList<PVector>();
        data = new float\[3\];
        generateData();
    \}

    // generate some points
    void generateData()\{
        points.clear();
        for(int i = 0 ; i < 1000; i++)\{
            points.add(new PVector(random(1)-0.5, random(1)-0.5, random(1)-0.5));
//            points.add(new PVector(random(1), random(1), random(1)));
//            points.add(angleMove(new PVector(0,0,random(10)), random(TWO_PI), random(1)));
        \}
    \}

    @Override
    public void update() \{
        var = data.length;
        // rotate the points
//        for(PVector _pv : points)\{
//            _pv.set(rot(_pv.x, _pv.y, 0.01));
//            _pv.set(rot(_pv.x, _pv.y, 0.01));
//        \}
        packData();
        outputData();
    \}

    // utiles
    PVector rot(double _x, double _y, double _a)\{
        return new PVector(_x * cos(_a) - _y * sin(_a),
		_x * sin(_a) + _y * cos(_a));
    \}

    PVector angleMove(PVector p, double a, double s)\{
        PVector out = new PVector(cos(a)*s, sin(a)*s, p.z);
        out.add(p);
        return out;
    \}

    // serialize the data into a float array
    void packData()\{
        data = new float\[points.size()*3\];
        int index = 0;
        for(PVector _pv : points)\{
            data\[index*3\] = (float)_pv.x;
            data\[index*3+1\] = (float)_pv.y;
            data\[index*3+2\] = (float)_pv.z;
            index++;
        \}
    \}
    // output the data
    void outputData()\{
        try \{
            PBytes.OutputStream bos = new PBytes.OutputStream(data.length * 4);
            ObjectOutputStream oos = new ObjectOutputStream(bos);
            oos.writeObject(data);
            oos.close();
            xyzxyz.send(bos.toBytes());
        \} catch (Exception ex) \{
            log(ERROR, ex);
        \}
    \}
"
  .var 3000.0
}
@ ./basicPointRender video:gl:p3d {
  #%graph.x 252
  #%graph.y 0
  #%graph.colors Red
  .code "

    @P(0) float\[\] xyzxyz;
    @P(1) @Type.Number() double ha;

    ArrayList<PVector> points;

    double rx;

    @Override
    public void setup() \{
        rectMode(CENTER);
        points = new ArrayList<PVector>();
    \}

    @Override
    public void draw() \{
        unpackData();
        ha = xyzxyz\[3\];//xyzxyz.length;

        translate(width/2, height/2);
        rotateX(rx += 0.01);
        rotateY(sin(rx));
        scale(2.0);

        stroke(255);
        double _scal = 444.0;
        strokeWeight(5);
        for(PVector _pv : points)\{
            point(_pv.x*_scal , _pv.y*_scal, _pv.z*_scal);
        \}

    \}
    public void unpackData()\{
        points.clear();
        for(int i = 0; i+2 < xyzxyz.length; i+=3)\{
            points.add( new PVector(xyzxyz\[i\], xyzxyz\[i+1\],xyzxyz\[i+2\]));
        \}
    \}
"
  .xyzxyz "r"
  .ha -0.06114555895328522
}
~ ./basicPointMaker!xyzxyz ./basicPointRender!xyzxyz
